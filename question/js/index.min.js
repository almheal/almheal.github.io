class Stepper{constructor({selectorWrapper:t,stepsSelector:e,selectorProgress:s,prevButton:i,nextButton:r,numberSelector:n}){this.$el=document.querySelector(t),this.steps=[...this.$el.querySelectorAll(e)],this.progress=document.querySelector(s),this.prevButton=document.querySelector(i),this.nextButton=document.querySelector(r),this.number=document.querySelector(n),this.lengthSteps=this.steps.length,this.oneNumberStep=parseInt(100/this.steps.length)}searchActiveStep(){const[t]=this.steps.filter(t=>t.classList.contains("active"));return t}addClass(t,e){t.classList.add(e)}prevStep(){const t=this.searchActiveStep();if(!t)return;const e=Number(t.dataset.step),s=this.steps[e-2];2===e&&(this.addStyle(this.prevButton,"display","none"),this.prevButton.classList.remove("active")),t.classList.remove("active"),this.addStyle(t,"display","none"),this.addStyle(s,"display","block"),this.addClass(s,"active"),setTimeout(()=>{this.addStyle(s,"transform","translateY(0%)"),this.calculateProgress("prev")},0)}nextStep(){this.prevButton.classList.contains("active")||(this.addClass(this.prevButton,"active"),this.addStyle(this.prevButton,"display","block"));const t=this.searchActiveStep();if(!t)return;const e=Number(t.dataset.step);e!==this.steps.length&&(t.classList.remove("active"),this.addStyle(t,"transform","translateY(-120%)"),setTimeout(()=>{this.addStyle(t,"display","none"),this.addStyle(this.steps[e],"display","block"),this.addClass(this.steps[e],"active"),this.calculateProgress("next")},700))}calculateProgress(t){if("prev"===t){const t=parseInt(this.progress.style.width)-this.oneNumberStep+"%";return this.addStyle(this.progress,"width",t),void(this.number.textContent=t)}const e=this.searchActiveStep();let s=0;for(let t=0;t<Number(e.dataset.step);t++)s++;const i=parseInt(s*this.oneNumberStep)+"%";this.number.textContent=i,this.addStyle(this.progress,"width",i)}addStyle(t,e,s){t.style[e]=s}initListeners(){this.prevButton.addEventListener("click",this.prevStep.bind(this)),this.nextButton.addEventListener("click",this.nextStep.bind(this))}init(){this.initListeners(),this.progress.style.width=this.oneNumberStep+"%",this.number.textContent=this.oneNumberStep+"%",this.addStyle(this.$el,"overflow","hidden"),this.addStyle(this.steps[0],"display","block"),this.steps.forEach(t=>this.addStyle(t,"transition","1s"))}}const stepper=new Stepper({selectorWrapper:"[data-stepper]",stepsSelector:"[data-step]",selectorProgress:"[data-progress]",prevButton:"[data-prev]",nextButton:"[data-next]",numberSelector:"[data-number]"});stepper.init();